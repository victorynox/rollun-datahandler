{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"rollun-datahandler \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 rollun-datahandler \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 zendframework\\zend-filter , zendframework\\zend-validator \u0438 symfony\\expression-language , \u0430 \u0442\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b. \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 zendframework\\zend-filter . \u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432: DuplicateSymbol - \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u0438 (\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432) \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043d\u0430 \u0442\u043e \u0447\u0442\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f) Evaluation - \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 (Expression Language) \u043d\u0430\u0434 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u0442 \u0435\u0433\u043e RemoveDigits - \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0446\u0438\u0444\u0440\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043f\u043e\u0441\u043b\u0435 \u0441\u0435\u0431\u044f \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0431\u0435\u043b ('a1c' = 'a c') RqlReplace - \u0444\u0438\u043b\u044c\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f rql \u043c\u0430\u0441\u043a\u0438 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 SortSymbols - \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 (\u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043a\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b) SortWords - \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c. \u0421\u0443\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u0432 \u0442\u043e\u043c \u0447\u0442\u043e \u0431\u044b \u043e\u043d \u0447\u0442\u043e \u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435 \u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430\u0434 \u043d\u0438\u043c\u0438: \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043b\u043e\u0433, \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u043f\u043e\u0447\u0442\u0443 \u0438 \u0442\u0434. \u041f\u0440\u0438\u043c\u0435\u0440: $processor = new Concat([ 'columns' = [1, 2], 'delimiter' = '-' 'resultColumn' = 3 ]); var_dump($processor- process(['a', 'b'])); // displays ['a', 'b', 'a-b'] \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u0432: Concat - \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u044d\u0442\u043e\u0433\u043e \u0436\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 Evaluation - \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u0434 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0433\u0434\u0435 \u043a\u043b\u044e\u0447 - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439) \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u044d\u0442\u043e\u0433\u043e \u0436\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 FilterApplier - \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043a \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 FilterApplier \u041f\u0440\u0438\u043c\u0435\u0440: $processor = new FilterApplier($options); var_dump($processor- process(['1a2b3', 'b'])); // displays ['1a2b3', '321'] \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u0430\u0441\u0438\u0432\u0430 $options \u0434\u043b\u044f FilterApplier. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0438 . $options = [ // Filters for applying // Key in array is a priority of filter 'filters' = [ 0 = [ 'service' = 'digits', ], 1 = [ 'service' = 'rqlReplace', 'options' = [ // optional 'pattern' = '123', 'replacement' = '321', ], ], ], 'argumentColumn' = 1, 'resultColumn' = 2, // optional (will save to argumentColumn) ] \u0412\u0441\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 FilterApplier \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0432\u0442\u043e\u0440\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0442\u043e\u0442 \u0436\u0435 \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0442\u043e \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440. \u0415\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442. $validator = new EmailAddress(); $processor = new FilterApplier($options, $validator); var_dump($processor- process(['1a2b3', '123'])); // displays ['1a2b3', 'b'] \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430, \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ArrayAdapter \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440. \u041e\u043d \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043e\u0433\u043e. \u043f\u043e\u043b\u044f/\u043f\u043e\u043b\u0435\u0439 $validator = ArrayAdapter([ 'columnsToValidate' = [1, 2], 'validator' = 'digits', ]); $processor = new FilterApplier($options, $validator); var_dump($processor- process(['1a2b3', '123'])); // displays ['1a2b3', '321'] \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 zendframework\\zend-validator . \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432: ArrayAdapter - \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 ArrayAdapter $array1 = ['abcd', '123']; $array2 = ['321', '123']; $validator = new ArrayValidator([ 'columnsToValidate' = [1, 2], 'validator' = 'digits', ]); var_dump($validator- isValid($array1)); // false var_dump($validator- isValid($array2)); // true \u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430 \u043d\u0443\u0436\u043d\u044b \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438, \u0438\u0445 \u043c\u043e\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 'validatorOptions' \u043a\u043b\u044e\u0447. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0438 . $validator = new ArrayValidator([ 'columnsToValidate' = [1, 2], 'validator' = 'inArray', 'validatorOptions' = [ 'haystack' = $array2 ], ]); var_dump($validator- isValid($array2)); // false \u042f\u0437\u044b\u043a \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 (Expression Language) \u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0434\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 symfony\\expression-language . \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 ExpressionLanguage \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041f\u0440\u0438\u043c\u0435\u0440: $expressionLanguage = new ExpressionLanguage(); var_dump($expressionLanguage- evaluate('1 + 2')); // displays 3 var_dump($expressionLanguage- compile('1 + 2')); // displays (1 + 2) // Array for variables in expression $values = [ 'a' = 2, 'b' = 5, ]; var_dump($expressionLanguage- evaluate('a * b'), $values)); // displays 10 var_dump($expressionLanguage- compile('a * b'), $values)); // displays (2 * 5) Expression functions Callback - \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 ExpressionFunction \u0441 \u043a\u043e\u043b\u0431\u044d\u043a\u0430. \u0422\u0430\u043a\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0448\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. $callback = function($value) { return $value . $value; }; $expressionFunction = new ExpressionFunction\\Callback($callback, 'foo'); $expressionLanguage = new ExpressionLanguage(); $expressionLanguage- addFunction($expressionFunction); var_dump($expressionLanguage- evaluate( foo('a') )); // displays 'aa' var_dump($expressionLanguage- compile( foo('a') )); // exception will be thrown Expression function providers PluginExpressionFunctionProvider - \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 ExpressionFunctionProvider \u0441 AbstractPluginManager, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434. $pluginManager = new FilterPluginManager(new ServiceManager()); $services = ['digits', 'stringTrim']; $expressionFunctionProvider = new PluginExpressionFunctionProvider($pluginManager, $services, 'filter'); $expressionLanguage = new ExpressionLanguage(); $expressionLanguage- registerProvider($expressionFunctionProvider); var_dump($expressionLanguage- evaluate( digits('123abc') )); // displays '123' var_dump($expressionLanguage- compile( stringTrim(' ad ') )); displays 'ad' Factories \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b, \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0434\u0430\u043b\u0435\u0435 '\u043f\u043b\u0430\u0433\u0438\u043d\u044b') \u043c\u043e\u0433\u0443\u0442 \u0431\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043a\u0430\u043a \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043b\u0430\u0433\u0438\u043d \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430, $filterPluginManager = FilterPluginManager(new ServiceManager()); // Create filter using filter plugin options $filter = $filterPluginManager- get('pregReplace', [ 'pattern' = '/aaa/', 'replacement' = 'a', ]); var_dump(get_class($filter)); // Zend\\Filter\\PregReplace \u0442\u0430\u043a \u0438 \u0441 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440. $container = new ServiceManager(); $container- setService('config', [ 'filters' = [ 'abstract_factory_config' = [ SimpleFilterAbstractFactory::class = [ 'pregReplaceFilter' = [ 'class' = PregReplace::class, 'options' = [ 'pattern' = '/aaa/', 'replacement' = 'a', ], ] ] ] ] ]); $filterPluginManager = FilterPluginManager($container); $filter = $filterPluginManager- get('pregReplace'); var_dump(get_class($filter)); // Zend\\Filter\\PregReplace \u0415\u0441\u043b\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u044b \u0438 \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0430\u0445 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0438 \u0447\u0435\u0440\u0435\u0437 $options \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0433\u0438\u043d \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u0442\u043e \u043e\u043d\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432\u0430\u0442\u044c, \u0438\u043d\u0430\u0447\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0448\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. $container = new ServiceManager(); $container- setService('config', [ 'filters' = [ 'abstract_factory_config' = [ SimpleFilterAbstractFactory::class = [ 'pregReplaceFilter' = [ 'class' = PregReplace::class, 'options' = [ 'pattern' = '/aaa/', 'replacement' = 'a', ], ] ] ] ] ]); $filterPluginManager = FilterPluginManager($container); // Will be thrown exception $filter = $filterPluginManager- get('pregReplace', [ 'pattern' = '/aaa/', 'replacement' = 'a', ]);","title":"rollun-datahandler"},{"location":"#rollun-datahandler","text":"\u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 rollun-datahandler \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 zendframework\\zend-filter , zendframework\\zend-validator \u0438 symfony\\expression-language , \u0430 \u0442\u0430\u043a \u0436\u0435 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b.","title":"rollun-datahandler"},{"location":"#_1","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 zendframework\\zend-filter . \u0421\u043f\u0438\u0441\u043e\u043a \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432: DuplicateSymbol - \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f \u0441\u0438\u043c\u0432\u043e\u043b\u0438 (\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432) \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u043d\u0430 \u0442\u043e \u0447\u0442\u043e \u0434\u0443\u0431\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f) Evaluation - \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 (Expression Language) \u043d\u0430\u0434 \u0432\u0445\u043e\u0434\u044f\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u0442 \u0435\u0433\u043e RemoveDigits - \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0432\u0441\u0435 \u0446\u0438\u0444\u0440\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435, \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044f \u043f\u043e\u0441\u043b\u0435 \u0441\u0435\u0431\u044f \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0431\u0435\u043b ('a1c' = 'a c') RqlReplace - \u0444\u0438\u043b\u044c\u0442\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u0442 \u0432\u0441\u0435 \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f rql \u043c\u0430\u0441\u043a\u0438 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 SortSymbols - \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 (\u043d\u0435 \u0438\u043c\u0435\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043a\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b) SortWords - \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"#_2","text":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u0441 \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u043e\u043c. \u0421\u0443\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u0430 \u0432 \u0442\u043e\u043c \u0447\u0442\u043e \u0431\u044b \u043e\u043d \u0447\u0442\u043e \u0442\u043e \u0441\u0434\u0435\u043b\u0430\u043b \u0441 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0435\u0437 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043a\u0430\u043a\u043e\u0435 \u0442\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043d\u0430\u0434 \u043d\u0438\u043c\u0438: \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u043b\u043e\u0433, \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u043d\u0430 \u043f\u043e\u0447\u0442\u0443 \u0438 \u0442\u0434. \u041f\u0440\u0438\u043c\u0435\u0440: $processor = new Concat([ 'columns' = [1, 2], 'delimiter' = '-' 'resultColumn' = 3 ]); var_dump($processor- process(['a', 'b'])); // displays ['a', 'b', 'a-b'] \u0421\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u043e\u0432: Concat - \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u044d\u0442\u043e\u0433\u043e \u0436\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 Evaluation - \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043d\u0430\u0434 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 (\u0433\u0434\u0435 \u043a\u043b\u044e\u0447 - \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0438, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439) \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u044d\u0442\u043e\u0433\u043e \u0436\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 FilterApplier - \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u043a \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430","title":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b"},{"location":"#filterapplier","text":"\u041f\u0440\u0438\u043c\u0435\u0440: $processor = new FilterApplier($options); var_dump($processor- process(['1a2b3', 'b'])); // displays ['1a2b3', '321'] \u041f\u0440\u0438\u043c\u0435\u0440 \u043c\u0430\u0441\u0438\u0432\u0430 $options \u0434\u043b\u044f FilterApplier. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0438 . $options = [ // Filters for applying // Key in array is a priority of filter 'filters' = [ 0 = [ 'service' = 'digits', ], 1 = [ 'service' = 'rqlReplace', 'options' = [ // optional 'pattern' = '123', 'replacement' = '321', ], ], ], 'argumentColumn' = 1, 'resultColumn' = 2, // optional (will save to argumentColumn) ] \u0412\u0441\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 FilterApplier \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0432\u0442\u043e\u0440\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c. \u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442 \u0442\u043e\u0442 \u0436\u0435 \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0442\u043e \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043d\u0430 \u0432\u0445\u043e\u0434\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440. \u0415\u0441\u043b\u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0443\u0434\u0435\u0442 \u043d\u0435 \u0432\u0430\u043b\u0438\u0434\u043d\u044b\u0439 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0435\u0433\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u0442. $validator = new EmailAddress(); $processor = new FilterApplier($options, $validator); var_dump($processor- process(['1a2b3', '123'])); // displays ['1a2b3', 'b'] \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430, \u043b\u0443\u0447\u0448\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ArrayAdapter \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440. \u041e\u043d \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442 \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u043d\u043e\u0433\u043e. \u043f\u043e\u043b\u044f/\u043f\u043e\u043b\u0435\u0439 $validator = ArrayAdapter([ 'columnsToValidate' = [1, 2], 'validator' = 'digits', ]); $processor = new FilterApplier($options, $validator); var_dump($processor- process(['1a2b3', '123'])); // displays ['1a2b3', '321']","title":"FilterApplier"},{"location":"#_3","text":"\u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u044e\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 zendframework\\zend-validator . \u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u043e\u0432: ArrayAdapter - \u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0435\u0442 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430","title":"\u0412\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b"},{"location":"#arrayadapter","text":"$array1 = ['abcd', '123']; $array2 = ['321', '123']; $validator = new ArrayValidator([ 'columnsToValidate' = [1, 2], 'validator' = 'digits', ]); var_dump($validator- isValid($array1)); // false var_dump($validator- isValid($array2)); // true \u0415\u0441\u043b\u0438 \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u0430 \u043d\u0443\u0436\u043d\u044b \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0446\u0438\u0438, \u0438\u0445 \u043c\u043e\u0436\u043d\u0430 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0447\u0435\u0440\u0435\u0437 'validatorOptions' \u043a\u043b\u044e\u0447. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0442\u043e\u043c \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u0432\u0430\u0442\u044c \u043e\u043f\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0430\u0431\u0440\u0438\u043a\u0438 . $validator = new ArrayValidator([ 'columnsToValidate' = [1, 2], 'validator' = 'inArray', 'validatorOptions' = [ 'haystack' = $array2 ], ]); var_dump($validator- isValid($array2)); // false","title":"ArrayAdapter"},{"location":"#expression-language","text":"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0434\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 symfony\\expression-language . \u041a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 ExpressionLanguage \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u041f\u0440\u0438\u043c\u0435\u0440: $expressionLanguage = new ExpressionLanguage(); var_dump($expressionLanguage- evaluate('1 + 2')); // displays 3 var_dump($expressionLanguage- compile('1 + 2')); // displays (1 + 2) // Array for variables in expression $values = [ 'a' = 2, 'b' = 5, ]; var_dump($expressionLanguage- evaluate('a * b'), $values)); // displays 10 var_dump($expressionLanguage- compile('a * b'), $values)); // displays (2 * 5)","title":"\u042f\u0437\u044b\u043a \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439 (Expression Language)"},{"location":"#expression-functions","text":"Callback - \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 ExpressionFunction \u0441 \u043a\u043e\u043b\u0431\u044d\u043a\u0430. \u0422\u0430\u043a\u0430\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u043a\u043e\u043c\u043f\u0438\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0430, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0448\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. $callback = function($value) { return $value . $value; }; $expressionFunction = new ExpressionFunction\\Callback($callback, 'foo'); $expressionLanguage = new ExpressionLanguage(); $expressionLanguage- addFunction($expressionFunction); var_dump($expressionLanguage- evaluate( foo('a') )); // displays 'aa' var_dump($expressionLanguage- compile( foo('a') )); // exception will be thrown","title":"Expression functions"},{"location":"#expression-function-providers","text":"PluginExpressionFunctionProvider - \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 ExpressionFunctionProvider \u0441 AbstractPluginManager, \u0443\u043a\u0430\u0437\u0430\u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0439 \u043c\u0435\u0442\u043e\u0434. $pluginManager = new FilterPluginManager(new ServiceManager()); $services = ['digits', 'stringTrim']; $expressionFunctionProvider = new PluginExpressionFunctionProvider($pluginManager, $services, 'filter'); $expressionLanguage = new ExpressionLanguage(); $expressionLanguage- registerProvider($expressionFunctionProvider); var_dump($expressionLanguage- evaluate( digits('123abc') )); // displays '123' var_dump($expressionLanguage- compile( stringTrim(' ad ') )); displays 'ad'","title":"Expression function providers"},{"location":"#factories","text":"\u041f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0440\u044b, \u0432\u0430\u043b\u0438\u0434\u0430\u0442\u043e\u0440\u044b \u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b (\u0434\u0430\u043b\u0435\u0435 '\u043f\u043b\u0430\u0433\u0438\u043d\u044b') \u043c\u043e\u0433\u0443\u0442 \u0431\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043a\u0430\u043a \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u043b\u0430\u0433\u0438\u043d \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430, $filterPluginManager = FilterPluginManager(new ServiceManager()); // Create filter using filter plugin options $filter = $filterPluginManager- get('pregReplace', [ 'pattern' = '/aaa/', 'replacement' = 'a', ]); var_dump(get_class($filter)); // Zend\\Filter\\PregReplace \u0442\u0430\u043a \u0438 \u0441 \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0447\u0435\u0440\u0435\u0437 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440. $container = new ServiceManager(); $container- setService('config', [ 'filters' = [ 'abstract_factory_config' = [ SimpleFilterAbstractFactory::class = [ 'pregReplaceFilter' = [ 'class' = PregReplace::class, 'options' = [ 'pattern' = '/aaa/', 'replacement' = 'a', ], ] ] ] ] ]); $filterPluginManager = FilterPluginManager($container); $filter = $filterPluginManager- get('pregReplace'); var_dump(get_class($filter)); // Zend\\Filter\\PregReplace \u0415\u0441\u043b\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u043f\u043b\u0430\u0433\u0438\u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u044b \u0438 \u0432 \u043a\u043e\u043d\u0444\u0438\u0433\u0430\u0445 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430 \u0438 \u0447\u0435\u0440\u0435\u0437 $options \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u043b\u0430\u0433\u0438\u043d \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440, \u0442\u043e \u043e\u043d\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u043a\u043e\u043d\u0444\u043b\u0438\u043a\u0442\u043e\u0432\u0430\u0442\u044c, \u0438\u043d\u0430\u0447\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u0440\u043e\u0448\u0435\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. $container = new ServiceManager(); $container- setService('config', [ 'filters' = [ 'abstract_factory_config' = [ SimpleFilterAbstractFactory::class = [ 'pregReplaceFilter' = [ 'class' = PregReplace::class, 'options' = [ 'pattern' = '/aaa/', 'replacement' = 'a', ], ] ] ] ] ]); $filterPluginManager = FilterPluginManager($container); // Will be thrown exception $filter = $filterPluginManager- get('pregReplace', [ 'pattern' = '/aaa/', 'replacement' = 'a', ]);","title":"Factories"}]}